import { createContext, useContext, useState, useEffect } from 'react';
import authApi from '../api/authApi';
import { CircularProgress, Box } from '@mui/material';

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
const AuthContext = createContext();

// üëá –¶–µ –±—É–¥–µ "–æ–±–≥–æ—Ä—Ç–∫–∞" –¥–ª—è —É—Å—å–æ–≥–æ –¥–æ–¥–∞—Ç–∫—É
export const AuthProvider = ({ children }) => {
    const [user, setUser] = useState(null); // üëà —Ç—É—Ç –±—É–¥–µ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏—Å—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
    const [accessToken, setAccessToken] = useState(null);
    const [isLoading, setIsLoading] = useState(true); // üëà –Ω–æ–≤–µ

    const isAuthenticated = !!user;

    // üëá login ‚Äì –∫–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å email/–ø–∞—Ä–æ–ª—å
    const login = async (email, password) => {
        try {
            const response = await authApi.post('/api/auth/login/', { email, password });
            setAccessToken(response.data.access);

            // –ü—ñ—Å–ª—è –ª–æ–≥—ñ–Ω—É ‚Äì –æ—Ç—Ä–∏–º–∞—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å
            const profile = await authApi.get('/api/auth/profile/', {
                headers: { Authorization: `Bearer ${response.data.access}` },
            });

            setUser(profile.data);
        } catch (error) {
            console.error('Login error', error);
            throw error;
        }
    };

    // üëá logout ‚Äì –æ—á–∏—â–µ–Ω–Ω—è –≤—Å—å–æ–≥–æ
    const logout = async () => {
        try {
            await authApi.post('/api/auth/logout/');
        } catch (e) {
            console.warn('Logout failed', e);
        } finally {
            setAccessToken(null);
            setUser(null);
        }
    };

    // üëá –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –¥–æ–¥–∞—Ç–∫—É
    useEffect(() => {
        const checkAuth = async () => {
            try {
                const res = await authApi.post('/api/auth/token/refresh/');
                const newAccess = res.data.access;
                setAccessToken(newAccess);

                const profile = await authApi.get('/api/auth/profile/', {
                    headers: { Authorization: `Bearer ${newAccess}` },
                });

                setUser(profile.data);
            } catch (e) {
                setUser(null);
                setAccessToken(null);
            } finally {
                setIsLoading(false); // ‚úÖ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            }
        };
        checkAuth();
    }, []);

    if (isLoading) {
        return (
            <Box
                sx={{
                    display: 'flex',
                    height: '100vh',
                    justifyContent: 'center',
                    alignItems: 'center',
                }}
            >
                <CircularProgress />
            </Box>
        );
    }
    
    return (
        <AuthContext.Provider value={{ user, accessToken, login, logout, isAuthenticated }}>
            {children}
        </AuthContext.Provider>
    );
};

// üëá –∑—Ä—É—á–Ω–æ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –∑ –±—É–¥—å-—è–∫–æ–≥–æ –º—ñ—Å—Ü—è
export const useAuth = () => useContext(AuthContext);
