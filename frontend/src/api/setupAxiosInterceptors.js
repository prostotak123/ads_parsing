import authApi from './authApi';
import coreApi from './coreApi';

let refreshingTokenPromise = null;

export function setupAxiosInterceptors(getAccessToken, setAccessToken, logout) {
  // ‚úÖ –Ü–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –∑–∞–ø–∏—Ç—ñ–≤: –¥–∏–Ω–∞–º—ñ—á–Ω–æ –¥–æ–¥–∞—î–º–æ –∞–∫—Ç—É–∞–ª—å–Ω–∏–π —Ç–æ–∫–µ–Ω
  coreApi.interceptors.request.use((config) => {
    if (!config.headers.Authorization) {
      const token = getAccessToken();
      if (token) {
        config.headers.Authorization = `Bearer ${token}`;
      }
    }
    return config;
  });

  // ‚úÖ –Ü–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: —Ä–µ–∞–∫—Ü—ñ—è –Ω–∞ 401 / 403
  coreApi.interceptors.response.use(
    response => response,
    async error => {
      // üõ°Ô∏è –ì–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –¥–æ—Å—Ç—É–ø–æ–º –¥–æ config
      const originalRequest = error?.config;
      if (!originalRequest) return Promise.reject(error);

      if (originalRequest._retry) return Promise.reject(error);

      const status = error.response?.status;
      if (status !== 401 && status !== 403) return Promise.reject(error);

      originalRequest._retry = true;

      if (!refreshingTokenPromise) {

        console.log('–ö–†–û–ö 1');

        refreshingTokenPromise = authApi.post('/api/auth/token/refresh/')
          .then(res => {
            console.log('–ö–†–û–ö 2');

            const newAccess = res.data.access;
            setAccessToken(newAccess);
            return newAccess;
          })
          .catch(err => {
            refreshingTokenPromise = null;
            logout();
            return Promise.reject(err);
          })
          .finally(() => {
            refreshingTokenPromise = null;
          });
      }

      try {
        console.log('–ö–†–û–ö 3');

        const newToken = await refreshingTokenPromise;
        originalRequest.headers.Authorization = `Bearer ${newToken}`;
        console.log('–ö–†–û–ö 4');
        console.log('originalRequest', originalRequest);


        return coreApi(originalRequest); // ‚¨ÖÔ∏è –ü–æ–≤—Ç–æ—Ä–Ω–∏–π –∑–∞–ø–∏—Ç
      } catch (err) {
        console.log('–ö–†–û–ö 5');

        return Promise.reject(err);
      }
    }
  );
}
