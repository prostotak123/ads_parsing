from datetime import datetime, timedelta
from zoneinfo import ZoneInfo

from django.contrib.postgres.fields import ArrayField  # üëà –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ –¥–ª—è PostgreSQL
from django.db import models
from django.utils import timezone as dj_tz


class WorkerConfiguration(models.Model):
    MANUAL = "manual"
    SCHEDULED_ONCE = "scheduled_once"
    INTERVAL = "interval"
    DAILY = "daily"

    SCHEDULE_CHOICES = [
        (MANUAL, "Manual"),
        (SCHEDULED_ONCE, "Scheduled Once"),
        (INTERVAL, "Interval"),
        (DAILY, "Daily at specific time"),
    ]

    STATUS_PENDING = "pending"
    STATUS_RUNNING = "running"
    STATUS_SUCCESS = "success"
    STATUS_FAILED = "failed"
    STATUS_NEVER = "never"

    STATUS_CHOICES = [
        (STATUS_PENDING, "Pending"),
        (STATUS_RUNNING, "Running"),
        (STATUS_SUCCESS, "Success"),
        (STATUS_FAILED, "Failed"),
        (STATUS_NEVER, "Never"),
    ]

    user_id = models.IntegerField(db_index=True)  # –ø—Ä–∏–≤'—è–∑–∫–∞ –¥–æ JWT-–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    name = models.CharField(max_length=100)
    filter_url = models.URLField()

    schedule_type = models.CharField(
        max_length=20,
        choices=SCHEDULE_CHOICES,
        default=MANUAL,
    )
    current_status = models.CharField(
        max_length=20,
        choices=STATUS_CHOICES,
        default=STATUS_NEVER,
    )
    schedule_time = models.DateTimeField(null=True, blank=True)

    schedule_start = models.DateTimeField(null=True, blank=True)
    schedule_end = models.DateTimeField(null=True, blank=True)
    # next_run = models.DateTimeField(null=True, blank=True)  # –î–ª—è –≤—Å—ñ—Ö, –∫—Ä—ñ–º MANUAL
    frequency_minutes = models.PositiveIntegerField(null=True, blank=True)  # –î–ª—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤
    daily_run_time = models.TimeField(null=True, blank=True)  # –î–ª—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É

    is_active = models.BooleanField(default=True)
    last_run_at = models.DateTimeField(null=True, blank=True)

    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        db_table = "worker_configuration"
        ordering = ["-updated_at"]
        constraints = [
            models.UniqueConstraint(fields=["user_id", "name"], name="unique_user_name"),
            models.UniqueConstraint(
                fields=["user_id", "filter_url", "schedule_type"], name="unique_user_filter_schedule"
            ),
        ]

    def __str__(self):
        return f"Profile {self.name} (User {self.user_id})"

    def next_run_at(self, *, ref=None):
        now_utc = ref or dj_tz.now()  # aware UTC

        match self.schedule_type:
            case self.MANUAL:
                return None

            case self.SCHEDULED_ONCE:
                print(self.name)
                # –Ø–∫—â–æ –≤–∂–µ –±—É–≤ –∑–∞–ø—É—Å–∫ —ñ —á–∞—Å –∑–∞–ø—É—Å–∫—É –Ω–æ–≤–∏–π, —Ç–æ –∑–∞–ø—É—Å–∫–∞—î–º–æ
                if self.last_run_at and self.schedule_time and self.last_run_at < self.schedule_time:
                    return self.schedule_time  # –Ø–∫—â–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø—É—Å–∫ –±—É–≤ –¥–æ –Ω–æ–≤–æ–≥–æ —á–∞—Å—É

                # –Ø–∫—â–æ –ø—Ä–æ—Ñ—ñ–ª—å –Ω–µ –±—É–≤ —â–µ –∑–∞–ø—É—â–µ–Ω–∏–π, —Ç–æ –∑–∞–ø—É—Å–∫–∞—î–º–æ –Ω–∞ schedule_time
                if not self.last_run_at and self.schedule_time:
                    return self.schedule_time

                # –Ø–∫—â–æ –≤–∂–µ –±—É–≤ –∑–∞–ø—É—Å–∫, –Ω–µ –∑–∞–ø—É—Å–∫–∞—î–º–æ –±—ñ–ª—å—à–µ
                return None

            case self.DAILY:
                # –ó–≥—ñ–¥–Ω–æ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó, –≤—Å—ñ —Ü—ñ –ø–æ–ª—è –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –¥–ª—è DAILY
                if not (self.daily_run_time and self.schedule_start and self.schedule_end):
                    return None

                # –Ø–∫—â–æ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å –ø–æ–∑–∞ –º–µ–∂–∞–º–∏ –¥–æ–∑–≤–æ–ª–µ–Ω–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É
                if now_utc < self.schedule_start:
                    return None

                if now_utc > self.schedule_end:
                    return None

                # –Ø–∫—â–æ –Ω–µ–º–∞—î –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–ø—É—Å–∫—É - –ø–µ—Ä—à–∏–π –∑–∞–ø—É—Å–∫ –≤ schedule_start
                if not self.last_run_at:
                    return self.schedule_start if self.schedule_start >= now_utc else now_utc

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –±—É–≤ –∑–∞–ø—É—Å–∫ —Å—å–æ–≥–æ–¥–Ω—ñ
                last_run_date = self.last_run_at.date()
                now_date = now_utc.date()

                # –Ø–∫—â–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø—É—Å–∫ –±—É–≤ —Å—å–æ–≥–æ–¥–Ω—ñ - –ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
                if last_run_date == now_date:
                    # –ù–∞—Å—Ç—É–ø–Ω–∏–π –∑–∞–ø—É—Å–∫ –∑–∞–≤—Ç—Ä–∞ –æ daily_run_time
                    next_run = datetime.combine(
                        now_date + timedelta(days=1), self.daily_run_time, tzinfo=ZoneInfo("UTC")
                    )
                else:
                    # –ú–æ–∂–µ–º–æ –∑–∞–ø—É—Å–∫–∞—Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ –æ daily_run_time –∞–±–æ –∑–∞—Ä–∞–∑
                    today_run_time = datetime.combine(now_date, self.daily_run_time, tzinfo=ZoneInfo("UTC"))
                    next_run = today_run_time if today_run_time >= now_utc else now_utc

                # –Ø–∫—â–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∑–∞–ø—É—Å–∫ –≤–∏—Ö–æ–¥–∏—Ç—å –∑–∞ –º–µ–∂—ñ schedule_end
                if next_run > self.schedule_end:
                    return None

                # –Ø–∫—â–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —á–∞—Å —â–µ –Ω–µ –Ω–∞—Å—Ç–∞–≤, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –π–æ–≥–æ
                if next_run > now_utc:
                    return next_run

                # –Ø–∫—â–æ —á–∞—Å –≤–∂–µ –ø—Ä–æ–π—à–æ–≤, –º–æ–∂–µ–º–æ –∑–∞–ø—É—Å–∫–∞—Ç–∏ –∑–∞—Ä–∞–∑
                return now_utc

            case self.INTERVAL:
                # –ó–≥—ñ–¥–Ω–æ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó, –≤—Å—ñ —Ü—ñ –ø–æ–ª—è –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –¥–ª—è INTERVAL
                if not (self.schedule_start and self.schedule_end and self.frequency_minutes):
                    return None

                # –Ø–∫—â–æ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å –ø–æ–∑–∞ –º–µ–∂–∞–º–∏ –¥–æ–∑–≤–æ–ª–µ–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É
                if now_utc < self.schedule_start:
                    return None

                if now_utc > self.schedule_end:
                    return None

                # –Ø–∫—â–æ –Ω–µ–º–∞—î –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–ø—É—Å–∫—É - –ø–µ—Ä—à–∏–π –∑–∞–ø—É—Å–∫ –≤ schedule_start
                if not self.last_run_at:
                    return self.schedule_start if self.schedule_start >= now_utc else now_utc

                # –û–±—á–∏—Å–ª—é—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —á–∞—Å –∑–∞–ø—É—Å–∫—É –≤—ñ–¥ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–ø—É—Å–∫—É
                next_run = self.last_run_at + timedelta(minutes=self.frequency_minutes)

                # –Ø–∫—â–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∑–∞–ø—É—Å–∫ –≤–∏—Ö–æ–¥–∏—Ç—å –∑–∞ –º–µ–∂—ñ schedule_end
                if next_run > self.schedule_end:
                    return None

                # –Ø–∫—â–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —á–∞—Å —â–µ –Ω–µ –Ω–∞—Å—Ç–∞–≤, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –π–æ–≥–æ
                if next_run > now_utc:
                    return next_run

                # –Ø–∫—â–æ —á–∞—Å –≤–∂–µ –ø—Ä–æ–π—à–æ–≤, –º–æ–∂–µ–º–æ –∑–∞–ø—É—Å–∫–∞—Ç–∏ –∑–∞—Ä–∞–∑
                return now_utc


class WorkerExecutionLog(models.Model):
    configuration = models.ForeignKey(WorkerConfiguration, on_delete=models.CASCADE, related_name="execution_logs")

    started_at = models.DateTimeField(auto_now_add=True)
    finished_at = models.DateTimeField(null=True, blank=True)

    status = models.CharField(
        max_length=20,
        choices=[("pending", "Pending"), ("running", "Running"), ("success", "Success"), ("failed", "Failed")],
        default="pending",
    )

    error_message = models.TextField(null=True, blank=True)

    class Meta:
        db_table = "worker_execution_log"
        ordering = ["-started_at"]

    def __str__(self):
        return f"Run {self.pk} for profile {self.configuration.name} ‚Äî {self.status}"


class AdCreative(models.Model):
    adheart_id = models.CharField(max_length=64, unique=True)
    adheart_link = models.URLField()
    media_link = models.URLField(blank=True, null=True)
    text = models.TextField(blank=True, null=True)

    geo = ArrayField(models.CharField(max_length=128), blank=True, default=list)  # "–ù—ñ–º–µ—á—á–∏–Ω–∞"
    platform = ArrayField(models.CharField(max_length=32), blank=True, default=list)
    creation_date = models.DateTimeField(blank=True, null=True)

    language = models.CharField(max_length=64, blank=True, null=True)
    funpage_link = models.URLField(blank=True, null=True)

    coverage = ArrayField(models.CharField(max_length=128), blank=True, default=list)
    active_days = models.PositiveIntegerField(blank=True, null=True)

    created_at = models.DateTimeField(auto_now_add=True)
